version: '3.8'

x-app-service: &app_service
  depends_on:
    data_feed:
      condition: service_completed_successfully
  networks:
    - db-network
    - backend-network
  environment:
      TZ: Asia/Ho_Chi_Minh
  command: [ "python3", "app.py" ]

services:
  pg_db:
    image: postgres:${DB_VERSION}
    container_name: pg_db
    profiles:
      - system
      - db
      - account
      - inventory
    restart: always
    ports:
      - ${DB_PORT}:5432
    networks:
      - db-network
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./db/data:/var/lib/postgres/data
      - ./db/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./db/init:/docker-entrypoint-initdb.d

  data_feed:
    image: data_feed
    profiles:
      - system
      - db
    build:
      context: ./tool/testdata
      dockerfile: Dockerfile
    container_name: data_feed
    depends_on:
      - pg_db
    networks:
      - db-network

  api_gateway:
    image: nginx:1.23.3
    container_name: api_gateway
    profiles:
      - system
      - api_gateway
    restart: unless-stopped
    depends_on:
      - account
      - inventory
    volumes:
      - ./api_gateway/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:80"
    networks:
      - frontend-network
      - backend-network

  account:
    image: ${DOCKER_REPO}/account:${APP_TAG}
    container_name: account
    profiles:
      - system
      - account
    volumes:
      - ./services/account/src:/app
    <<: *app_service

  inventory:
    image: ${DOCKER_REPO}/inventory:${APP_TAG}
    container_name: inventory
    profiles:
      - system
      - inventory
    volumes:
      - ./services/inventory/src:/app
    <<: *app_service

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  db-network:
    driver: bridge
