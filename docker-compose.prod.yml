version: '3.8'

x-app-service: &app_service
  depends_on:
    data_feed:
      condition: service_completed_successfully
    rabbitmq:
      condition: service_healthy
  networks:
    - db-network
    - backend-network
  environment:
      TZ: Asia/Ho_Chi_Minh
      PYTHONUNBUFFERED: 1
  command: [ "python3", "app.py" ]
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
    interval: 30s
    timeout: 10s
    retries: 5

services:
  pg_db:
    image: postgres:${DB_VERSION}
    container_name: pg_db
    restart: always
    networks:
      - db-network
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./db/data:/var/lib/postgres/data
      - ./db/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./db/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - ./event_bus/lib:/var/lib/rabbitmq
      - ./event_bus/log:/var/log/rabbitmq
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  data_feed:
    image: data_feed
    build:
      context: ./tool/testdata
      dockerfile: Dockerfile
    container_name: data_feed
    depends_on:
      pg_db:
        condition: service_healthy
    networks:
      - db-network

  api_gateway:
    image: nginx:1.23.3
    container_name: api_gateway
    restart: unless-stopped
    depends_on:
      account:
        condition: service_healthy
      discount:
        condition: service_healthy
      order:
        condition: service_healthy
      inventory:
        condition: service_healthy
    volumes:
      - ./api_gateway/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:8080"
    networks:
      - frontend-network
      - backend-network

  account:
    image: ${DOCKER_REPO}/account:${APP_TAG}
    container_name: account
    <<: *app_service

  inventory:
    image: ${DOCKER_REPO}/inventory:${APP_TAG}
    container_name: inventory
    <<: *app_service

  discount:
    image: ${DOCKER_REPO}/discount:${APP_TAG}
    container_name: discount
    <<: *app_service

  order:
    image: ${DOCKER_REPO}/order:${APP_TAG}
    container_name: order
    <<: *app_service

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  db-network:
    driver: bridge
